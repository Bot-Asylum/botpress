{"version":3,"sources":["seed.ts"],"names":["dbFile","process","env","DB_PATH","daysBack","initialNumberOfUsers","interactionsPerDay","retentionRate","growthRate","fixedDailyGrowth","channels","distribution","users","vary","nb","variance","_","random","dropUsers","count","parseInt","removeAt","uniq","times","length","pullAt","console","log","generateName","addUsers","knex","date","rows","i","channel","sample","id","uniqueId","first_name","key","value","type","last_name","gender","Math","locale","timezone","user","user_id","attributes","JSON","stringify","created_at","push","batchInsert","then","run","interactions","startDate","Date","subtract","toDate","toISOString","Promise","mapSeries","n","day","target","hour","time","startOf","add","direction","ts","text","addDate","nbNewUsers","fs","existsSync","unlinkSync"],"mappings":"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","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import fs from 'fs'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport nanoid from 'nanoid/generate'\n\nimport db from './db'\n\nconst dbFile = process.env.DB_PATH || './seed.sqlite'\nconst daysBack = 98\nconst initialNumberOfUsers = 1000\nconst interactionsPerDay = 1.5\nconst retentionRate = 0.94\nconst growthRate = 0.01\nconst fixedDailyGrowth = 250\nconst channels = ['facebook', 'slack']\nconst distribution = {\n  0: 5,\n  1: 5,\n  2: 5,\n  3: 7,\n  4: 10,\n  5: 10,\n  6: 20,\n  7: 30,\n  8: 70,\n  9: 65,\n  10: 20,\n  11: 30,\n  12: 35,\n  13: 23,\n  14: 20,\n  15: 35,\n  16: 65,\n  17: 70,\n  18: 75,\n  19: 30,\n  20: 25,\n  21: 20,\n  22: 9,\n  23: 8\n}\n\nconst users = []\n\nconst vary = (nb, variance = 0.1) => {\n  return nb + _.random(-variance * nb, variance * nb, false)\n}\n\nconst dropUsers = count => {\n  count = parseInt(count)\n  const removeAt = _.uniq(_.times(count, () => _.random(0, users.length)))\n  _.pullAt(users, removeAt)\n  console.log('Removed ~', count, 'users')\n}\n\nconst generateName = () => {\n  return nanoid(_.random(5, 20, false))\n}\n\nconst addUsers = (count, knex, date) => {\n  count = parseInt(count)\n  const rows = []\n\n  for (let i = 0; i < count; i++) {\n    const channel = _.sample(channels)\n    const id = _.uniqueId()\n\n    const first_name = { key: 'first_name', value: generateName(), type: 'string' }\n    const last_name = { key: 'last_name', value: generateName(), type: 'string' }\n    const gender = { key: 'gender', value: Math.random() < vary(0.65, 0.35) ? 'male' : 'female', type: 'string' }\n    const locale = { key: 'locale', value: _.sample(['en_US', 'fr_CA', 'en_CA']), type: 'string' }\n    const timezone = { key: 'timezone', value: _.random(-6, 12, false), type: 'string' }\n\n    const user = {\n      user_id: id,\n      channel: channel,\n      attributes: JSON.stringify([first_name, last_name, gender, locale, timezone]),\n      created_at: date\n    }\n\n    users.push(user)\n    rows.push(user)\n  }\n\n  return knex.batchInsert('srv_channel_users', rows, 20).then(() => console.log('Added', count, 'users'))\n}\n\nconst run = async knex => {\n  const interactions = []\n  const startDate = moment(new Date())\n    .subtract(daysBack, 'days')\n    .toDate()\n    .toISOString()\n\n  return addUsers(initialNumberOfUsers, knex, startDate)\n    .then(() => {\n      return Promise.mapSeries(\n        _.times(daysBack, n => n + 1),\n        day => {\n          const i = daysBack - day\n          console.log('day', i)\n          let count = 0\n          const target = vary(interactionsPerDay * users.length)\n\n          while (count < target) {\n            const hour = _.random(1, 24, false)\n            if (Math.random() > distribution[hour] / 100) {\n              continue\n            }\n\n            const time = moment(new Date())\n              .startOf('day')\n              .subtract(i, 'days')\n              .add(hour - 1, 'hours')\n              .toDate()\n              .toISOString()\n\n            const direction = Math.random() > 0.3 ? 'in' : 'out'\n            const user = _.sample(users)\n\n            interactions.push({\n              ts: time,\n              type: 'text',\n              text: 'Random',\n              user_id: user.user_id,\n              channel: user.channel,\n              direction: direction\n            })\n            count++\n          }\n\n          dropUsers(vary((1 - retentionRate) * users.length, 0.13))\n          const addDate = moment(new Date())\n            .subtract(i, 'days')\n            .toDate()\n            .toISOString()\n\n          const nbNewUsers = vary(users.length * growthRate, 0.25) + vary(fixedDailyGrowth, 0.25)\n          return addUsers(nbNewUsers, knex, addDate)\n        }\n      )\n    })\n    .then(() => {\n      console.log('Preparing to insert', interactions.length)\n      return knex\n        .batchInsert('analytics_interactions', interactions, 20)\n        .then(() => console.log('Added', interactions.length, 'interactions'))\n    })\n    .then(() => console.log('ALL DONE'))\n}\n\nif (fs.existsSync(dbFile)) {\n  fs.unlinkSync(dbFile)\n}\n\nexport default { run }\n"]}