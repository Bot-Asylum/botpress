{"version":3,"sources":["job.ts"],"names":["AnalyticsService","constructor","bp","db","Map","todaysEvents","events","findByDate","Date","compileFeedbackMetrics","compileUsersCountMetric","currentPromise","batch","length","batchSize","Math","min","BATCH_SIZE","metrics","splice","insertMany","catch","err","logger","attachError","error","push","finally","undefined","initialize","config","getModuleConfig","analytics","enabled","interval","start","intervalRef","setInterval","_runTask","addMetric","metricDef","botConfigs","has","botId","botConfig","getModuleConfigForBot","set","get","addUserMetric","channel","metric","AnalyticsMetric","NewUsersCount","method","AnalyticsMethod","IncrementDaily","TotalUsers","IncrementTotal","getDateRange","startDate","endDate","getBetweenDates","setQnaFeedbackCount","feedback","count","FeedbackPositiveQna","FeedbackNegativeQna","Replace","increment","setGoalFeedbackCount","FeedbackPositiveGoal","FeedbackNegativeGoal","incomingEvents","filter","e","direction","_","chain","goalId","groupBy","forEach","value","target","ActiveUsers"],"mappings":"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","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import sdk, { Analytics, AnalyticsMethod, AnalyticsMetric, BotConfig, Logger, MetricDefinition } from 'botpress/sdk'\nimport _ from 'lodash'\nimport ms from 'ms'\n\nimport { AnalyticsDatabase } from './db'\n\nexport default class AnalyticsService {\n  private readonly BATCH_SIZE = 100\n\n  private batch: MetricDefinition[] = []\n  private botConfigs: Map<string, BotConfig> = new Map()\n  private enabled = false\n  private interval!: number\n  private intervalRef\n  private currentPromise\n\n  constructor(private bp: typeof sdk, private db: AnalyticsDatabase) {}\n\n  async initialize() {\n    const config = (await this.bp.config.getModuleConfig('analytics')).analytics\n    if (!config || !config.enabled) {\n      return\n    }\n\n    this.interval = ms(config.interval as string)\n    this.enabled = config.enabled\n  }\n\n  start() {\n    if (this.intervalRef || !this.enabled) {\n      return\n    }\n    this.intervalRef = setInterval(this._runTask, this.interval)\n  }\n\n  async addMetric(metricDef: MetricDefinition): Promise<void> {\n    if (!this.botConfigs.has(metricDef.botId)) {\n      const botConfig = await this.bp.config.getModuleConfigForBot('analytics', metricDef.botId)\n      this.botConfigs.set(metricDef.botId, botConfig)\n    }\n\n    if (this.enabled || this.botConfigs.get(metricDef.botId)?.analytics?.enabled) {\n      this.batch.push(metricDef)\n    }\n  }\n\n  async addUserMetric(botId, channel): Promise<void> {\n    await this.addMetric({\n      botId,\n      channel,\n      metric: AnalyticsMetric.NewUsersCount,\n      method: AnalyticsMethod.IncrementDaily\n    })\n    await this.addMetric({\n      botId,\n      channel,\n      metric: AnalyticsMetric.TotalUsers,\n      method: AnalyticsMethod.IncrementTotal\n    })\n  }\n\n  async getDateRange(botId: string, startDate: Date, endDate: Date, channel?: string): Promise<Analytics[]> {\n    return this.db.getBetweenDates(botId, startDate, endDate, channel)\n  }\n\n  private _runTask = async () => {\n    const todaysEvents = await this.bp.events.findByDate(new Date())\n    await this.compileFeedbackMetrics(todaysEvents)\n    await this.compileUsersCountMetric(todaysEvents)\n\n    if (this.currentPromise || !this.batch.length) {\n      return\n    }\n\n    const batchSize = Math.min(this.batch.length, this.BATCH_SIZE)\n    const metrics = this.batch.splice(0, batchSize)\n    this.currentPromise = this.db\n      .insertMany(metrics)\n      .catch(err => {\n        this.bp.logger.attachError(err).error('Could not persist metrics. Re-queuing now.')\n        this.batch.push(...metrics)\n      })\n      .finally(() => {\n        this.currentPromise = undefined\n      })\n  }\n\n  private async setQnaFeedbackCount(botId, channel, feedback, count): Promise<void> {\n    const metric = feedback > 0 ? AnalyticsMetric.FeedbackPositiveQna : AnalyticsMetric.FeedbackNegativeQna\n    return this.addMetric({\n      botId,\n      channel,\n      metric,\n      method: AnalyticsMethod.Replace,\n      increment: count\n    })\n  }\n\n  private async setGoalFeedbackCount(botId, channel, feedback, count): Promise<void> {\n    const metric = feedback > 0 ? AnalyticsMetric.FeedbackPositiveGoal : AnalyticsMetric.FeedbackNegativeGoal\n    return this.addMetric({\n      botId,\n      channel,\n      metric,\n      method: AnalyticsMethod.Replace,\n      increment: count\n    })\n  }\n\n  private async compileFeedbackMetrics(events: sdk.IO.StoredEvent[]): Promise<void> {\n    const incomingEvents = events.filter(e => e.direction === 'incoming')\n\n    _.chain(incomingEvents)\n      .filter(e => !e.goalId && e.feedback)\n      .groupBy((e: sdk.IO.StoredEvent) => `${e.botId}-${e.channel}-${e.feedback}`)\n      .forEach(\n        async (value, _) =>\n          await this.setQnaFeedbackCount(value[0]['botId'], value[0]['channel'], value[0]['feedback'], value.length)\n      )\n      .value()\n\n    _.chain(incomingEvents)\n      .filter(e => e.goalId && e.feedback)\n      .groupBy((e: sdk.IO.StoredEvent) => `${e.botId}-${e.channel}-${e.feedback}`)\n      .forEach(\n        async (value, _) =>\n          await this.setGoalFeedbackCount(value[0]['botId'], value[0]['channel'], value[0]['feedback'], value.length)\n      )\n      .value()\n  }\n\n  private async compileUsersCountMetric(events: sdk.IO.StoredEvent[]) {\n    _.chain(events)\n      .groupBy(e => `${e.botId}-${e.channel}-${e.target}`)\n      .forEach(async (value, _) => {\n        await this.addMetric({\n          botId: value[0]['botId'],\n          channel: value[0]['channel'],\n          metric: AnalyticsMetric.ActiveUsers,\n          method: AnalyticsMethod.Replace\n        })\n      })\n      .value()\n  }\n}\n"]}