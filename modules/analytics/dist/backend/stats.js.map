{"version":3,"sources":["stats.ts"],"names":["Stats","constructor","knex","rangeDates","select","raw","then","get","result","min","max","undefined","range","diff","ranges","i","push","parseInt","ret","format","date","getTotalUsers","dates","channels","statsBase","reduce","acc","curr","channel","total","groupBy","orderBy","rows","totalChannel","Date","subtract","Object","assign","map","row","count","add","_","toPairs","k","v","getLastDaysRange","nb","nbOfDays","times","Number","n","start","startOf","toDate","end","endOf","day","getDailyActiveUsers","reverse","Promise","mapSeries","join","where","isBetween","results","name","getInteractionRanges","inner","from","andWhere","toString","r","mapValues","a","s1","s2","s3","s4","s5","s6","s7","s8","getAverageInteractions","lastWeek","now","knx","as","parseFloat","getNumberOfUsers","label","usersRetention","cohorts","coo","cohortStart","cohortEnd","cohortName","cohort_size","daysToAdd","dta","since","isAfter","partial_retention","isSameOrAfter","retention","mean","filter","getBusyHours","hourOfDay","sql","biggest","x","ts","Math","toFixed","getLastRun","limit","entry","setLastRun","insert"],"mappings":"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","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\n\nexport default class Stats {\n  constructor(private knex) {}\n\n  rangeDates() {\n    return this.knex('srv_channel_users')\n      .select(this.knex.raw('max(created_at) as max, min(created_at) as min'))\n      .then()\n      .get(0)\n      .then(result => {\n        if (!result.min || !result.max) {\n          return undefined\n        }\n\n        const range = moment(result.max).diff(moment(result.min), 'days')\n        const ranges = []\n        for (let i = 1; i <= 10; i++) {\n          ranges.push(parseInt(result.min + (range / 10) * i))\n        }\n        const ret = {\n          min: result.min,\n          max: result.max,\n          format: undefined,\n          ranges: ranges\n        }\n        if (range < 360) {\n          ret.format = date => moment(date).format('MMM Do')\n        } else {\n          // > 1year period\n          ret.format = date => moment(date).format('MMM YY')\n        }\n\n        return ret\n      })\n  }\n\n  getTotalUsers() {\n    return this.rangeDates().then(dates => {\n      if (!dates) {\n        return\n      }\n      return this.knex('srv_channel_users')\n        .select(this.knex.raw('distinct channel'))\n        .then(channels => {\n          const statsBase = channels.reduce(\n            (acc, curr) => {\n              acc[curr.channel] = 0\n              return acc\n            },\n            { total: 0 }\n          )\n\n          return this.knex('srv_channel_users')\n            .select(this.knex.raw('count(*) as count, max(created_at) as date, channel'))\n            .groupBy(this.knex.raw('date(created_at), channel'))\n            .orderBy(this.knex.raw('date(created_at)'))\n            .then(rows => {\n              let total = 0\n              const totalChannel = {}\n              const result = {}\n              const min = dates.format(moment(new Date(dates.min)).subtract(1, 'day'))\n              result[min] = Object.assign({}, statsBase)\n\n              rows.map(row => {\n                const date = dates.format(row.date)\n                if (!result[date]) {\n                  result[date] = Object.assign({}, statsBase)\n                }\n                if (!totalChannel[row.channel]) {\n                  totalChannel[row.channel] = 0\n                }\n                const count = parseInt(row.count)\n                totalChannel[row.channel] += count\n                result[date].total = total += count\n                result[date][row.channel] = totalChannel[row.channel]\n              })\n\n              const max = dates.format(moment(new Date(dates.max)).add(1, 'hour'))\n              result[max] = Object.assign({}, statsBase, { total: total }, totalChannel)\n\n              return _.toPairs(result).map(([k, v]) => {\n                v['name'] = k\n                return v\n              })\n            })\n        })\n    })\n  }\n\n  getLastDaysRange(nb?) {\n    const nbOfDays = nb || 14\n\n    const ranges = _.times(nbOfDays, Number)\n    return ranges.map(n => {\n      const date = moment(new Date()).subtract(n, 'days')\n      return {\n        date: date.format('MMM Do'),\n        start: date.startOf('day').toDate(),\n        end: date.endOf('day').toDate(),\n        day: date.format('l')\n      }\n    })\n  }\n\n  getDailyActiveUsers() {\n    const ranges = _.reverse(this.getLastDaysRange())\n    return Promise.mapSeries(ranges, range => {\n      return this.knex('analytics_interactions as ai')\n        .select(this.knex.raw('count(*) as count, ai.channel'))\n        .join('srv_channel_users', 'srv_channel_users.user_id', 'ai.user_id')\n        .where(this.knex.date.isBetween('ts', range['start'], range['end']))\n        .where('direction', '=', 'in')\n        .groupBy(['ai.user_id', 'ai.channel'])\n        .then(results => {\n          return results.reduce(\n            function(acc, curr) {\n              const count = parseInt(curr.count)\n              acc.total += count\n              acc[curr.channel] = count\n\n              return acc\n            },\n            { total: 0, name: range['date'] }\n          )\n        })\n    })\n  }\n\n  // FIXME: Fix or remove, gender is not a valid column anymore\n  // getDailyGender() {\n  //   const ranges = _.reverse(this.getLastDaysRange())\n  //   return Promise.mapSeries(ranges, range => {\n  //     return this.knex('analytics_interactions')\n  //       .select(this.knex.raw('count(*) as count, gender'))\n  //       .join('users', 'users.id', 'analytics_interactions.user')\n  //       .where(this.knex.date.isBetween('ts', range.start, range.end))\n  //       .andWhere('direction', '=', 'in')\n  //       .groupBy(['user', 'gender'])\n  //       .then(results => {\n  //         return results.reduce(\n  //           function(acc, curr) {\n  //             const count = parseInt(curr.count)\n  //             acc.total += count\n  //             acc[curr.gender] = count\n  //             return acc\n  //           },\n  //           { total: 0, name: range.date }\n  //         )\n  //       })\n  //   })\n  // }\n\n  getInteractionRanges() {\n    const ranges = this.getLastDaysRange()\n    return Promise.mapSeries(ranges, range => {\n      const inner = this.knex\n        .from('analytics_interactions')\n        .where(this.knex.date.isBetween('ts', range['start'], range['end']))\n        .andWhere('direction', '=', 'in')\n        .groupBy('user_id')\n        .select(this.knex.raw('count(*) as c'))\n        .toString()\n\n      return this.knex.raw(\n        `select\n        sum(r1) as s1,\n        sum(r2) as s2,\n        sum(r3) as s3,\n        sum(r4) as s4,\n        sum(r5) as s5,\n        sum(r6) as s6,\n        sum(r7) as s7,\n        sum(r8) as s8\n      from (select\n        (select count(*) as count where c between 0 and 1) as r1,\n        (select count(*) where c between 2 and 3) as r2,\n        (select count(*) where c between 4 and 5) as r3,\n        (select count(*) where c between 6 and 9) as r4,\n        (select count(*) where c between 10 and 14) as r5,\n        (select count(*) where c between 15 and 29) as r6,\n        (select count(*) where c between 30 and 50) as r7,\n        (select count(*) where c > 50) as r8\n          from (` +\n          inner +\n          `) as q1 ) as q2`\n      )\n    })\n      .then(rows => {\n        if (rows[0].rows) {\n          return rows.map(r => r.rows[0])\n        } else {\n          return rows.map(r => r[0])\n        }\n      })\n      .then(results => {\n        return results.reduce(\n          function(acc, curr) {\n            return _.mapValues(acc, (a, k) => {\n              return a + (parseInt(curr[k]) || 0)\n            })\n          },\n          { s1: 0, s2: 0, s3: 0, s4: 0, s5: 0, s6: 0, s7: 0, s8: 0 }\n        )\n      })\n      .then(results => {\n        return [\n          { name: '[0-2]', count: results.s1 },\n          { name: '[2-4]', count: results.s2 },\n          { name: '[4-6]', count: results.s3 },\n          { name: '[6-10]', count: results.s4 },\n          { name: '[10-15]', count: results.s5 },\n          { name: '[15-30]', count: results.s6 },\n          { name: '[30-50]', count: results.s7 },\n          { name: '50+', count: results.s8 }\n        ]\n      })\n  }\n\n  getAverageInteractions() {\n    // Average incoming interactions per user per day for the last 7 days\n    const lastWeek = moment(new Date())\n      .subtract(7, 'days')\n      .toDate()\n    const now = this.knex.date.now()\n    const knx = this.knex\n\n    return this.knex\n      .select(this.knex.raw('avg(c) as count'))\n      .from(function() {\n        return this.from('analytics_interactions')\n          .where(knx.date.isBetween('ts', lastWeek, now))\n          .andWhere('direction', '=', 'in')\n          .groupBy(knx.raw('user_id, date(ts)'))\n          .select(knx.raw('count(*) as c'))\n          .as('q1')\n      })\n      .then()\n      .get(0)\n      .then(result => {\n        return parseFloat(result.count) || 0.0\n      })\n  }\n\n  getNumberOfUsers() {\n    const knx = this.knex\n    // Get total number of active users for today, yesterday, this week\n\n    const ranges = [\n      {\n        label: 'today',\n        start: moment(new Date())\n          .startOf('day')\n          .toDate(),\n        end: new Date()\n      },\n      {\n        label: 'yesterday',\n        start: moment(new Date())\n          .subtract(1, 'days')\n          .startOf('day')\n          .toDate(),\n        end: moment(new Date())\n          .subtract(1, 'days')\n          .endOf('day')\n          .toDate()\n      },\n      {\n        label: 'week',\n        start: moment(new Date())\n          .startOf('week')\n          .toDate(),\n        end: moment(new Date())\n          .endOf('week')\n          .toDate()\n      }\n    ]\n\n    return Promise.mapSeries(ranges, range => {\n      return this.knex\n        .select(this.knex.raw('count(*) as count'))\n        .from(function() {\n          return this.from('analytics_interactions')\n            .where(knx.date.isBetween('ts', range['start'], range['end']))\n            .andWhere('direction', '=', 'in')\n            .groupBy('user_id')\n            .select(knx.raw(1))\n            .as('q1')\n        })\n        .then()\n        .get(0)\n        .then(result => ({ label: range['label'], count: result.count }))\n    }).then(results => {\n      return results.reduce((acc, curr) => {\n        acc[curr.label] = curr.count\n        return acc\n      }, {})\n    })\n  }\n\n  usersRetention() {\n    const knx = this.knex\n    // Get the last 7 days cohort of users along with the retention rate\n    let cohorts: any = _.times(8, n => Number(8 - n))\n    cohorts = cohorts.map(n => {\n      const day = moment().subtract(n, 'days')\n      return {\n        start: day.startOf('day').toDate(),\n        end: day.endOf('day').toDate(),\n        name: day.format('MMM Do'),\n        date: day\n      }\n    })\n\n    const result = {}\n\n    // For each days of the cohort\n    return Promise.mapSeries(cohorts, coo => {\n      const cohortStart = _.get(coo, 'start')\n      const cohortEnd = _.get(coo, 'end')\n      const cohortName = _.get(coo, 'name')\n\n      // Compute the cohort size [i.e. how many new users on this day?]\n      return this.knex('srv_channel_users')\n        .where(this.knex.date.isBetween('created_at', cohortStart, cohortEnd))\n        .select(this.knex.raw('count(*) as cohort_size'))\n        .then()\n        .get(0)\n        .then(({ cohort_size }) => {\n          cohort_size = parseFloat(cohort_size)\n\n          // Compute the next 7 days of the cohort\n          // and check how many users [from this cohort] spoke on or before this date\n          // A user is considered as retentioned if he interacted with the bot any day after he onboarded\n\n          const daysToAdd = _.times(7, n => n) // from 0 to 6\n          return Promise.mapSeries(daysToAdd, dta => {\n            const since = moment(cohortStart)\n              .add(dta, 'days')\n              .endOf('day')\n              .toDate() // +x days\n\n            return this.knex\n              .from(function() {\n                this.from('analytics_interactions')\n                  .join('srv_channel_users', 'analytics_interactions.user_id', 'srv_channel_users.user_id')\n                  // where he is a member a this cohort\n                  .where(knx.date.isBetween('created_at', cohortStart, cohortEnd))\n                  // and where he interacted with the bot since onboard+X days\n                  .andWhere(knx.date.isAfter('ts', since))\n                  // and where the user spoke, not the bot\n                  .andWhere('direction', '=', 'in')\n                  .groupBy('srv_channel_users.user_id')\n                  // returns the number of interactions per user\n                  .select(knx.raw('count(*) as interaction_count'))\n                  .as('q1')\n              })\n              .select(this.knex.raw('count(*) as partial_retention')) // return the total number of users\n              .then()\n              .get(0)\n              .then(({ partial_retention }) => {\n                partial_retention = parseFloat(partial_retention)\n\n                // if the date is out of the cohort sample\n                if (\n                  moment(since)\n                    .startOf('day')\n                    .isSameOrAfter(moment().startOf('day'))\n                ) {\n                  return undefined\n                }\n\n                return partial_retention / cohort_size || 0\n              })\n          }).then(retention => {\n            const mean = _.mean(_.filter(retention, v => v !== undefined))\n            result[cohortName] = [cohort_size, ...retention, mean]\n          })\n        })\n    }).then(() => result)\n  }\n\n  getBusyHours() {\n    const ranges = this.getLastDaysRange(7)\n    const result = {}\n\n    return Promise.mapSeries(ranges, range => {\n      // select count(*) as count, ts from interactions\n      // group by strftime('%H', ts/1000, 'unixepoch')\n      return this.knex('analytics_interactions')\n        .where(this.knex.date.isBetween('ts', range.start, range.end))\n        .select(this.knex.raw('count(*) as count, ' + this.knex.date.hourOfDay('ts').sql + ' as ts'))\n        .groupBy(this.knex.date.hourOfDay('ts'))\n        .then(rows => {\n          const row = []\n          _.times(24, () => row.push(0))\n          const biggest = rows.reduce((acc, curr) => {\n            return (acc = curr.count > acc ? curr.count : acc)\n          }, 0)\n          rows.map(x => {\n            row[parseInt(x.ts)] = Math.min(Number((x.count / biggest).toFixed(2)), 0.75)\n          })\n\n          result[range.date] = row\n        })\n    }).then(() => result)\n  }\n\n  getLastRun() {\n    return this.knex('analytics_runs')\n      .orderBy('ts', 'desc')\n      .limit(1)\n      .then()\n      .get(0)\n      .then(entry => {\n        return entry && moment(entry.ts)\n      })\n  }\n\n  async setLastRun() {\n    return this.knex('analytics_runs').insert({ ts: this.knex.date.now() })\n  }\n}\n"]}