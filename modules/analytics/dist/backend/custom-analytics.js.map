{"version":3,"sources":["custom-analytics.ts"],"names":["bp","botId","graphs","knex","database","update","name","operation","value","racing","_","isString","Error","today","format","toLowerCase","trim","includes","result","where","andWhere","then","insert","date","count","catch","err","increment","isNumber","countQuery","Math","abs","raw","decrement","set","addGraph","graph","type","push","countUniqRecords","from","to","variable","uniqRecordsQuery","select","as","first","getters","variables","rows","indexOf","groupBy","map","row","parseInt","results","countUniq","percent","variable1","variable2","last","count1","count2","allDates","uniq","records","find","n1","n2","isFunction","fn","get","undefined","fnAvg","n1Uniq","n2Uniq","piechart","drop","split","join","isEmpty","getAll","Promise"],"mappings":";;;;;;;AAAA;;AACA;;;;eAEe,CAAC;AAAEA,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAmB;AAChC,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,IAAI,GAAGH,EAAE,CAACI,QAAhB;;AAEA,iBAAeC,MAAf,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,KAAvC,EAA8CC,MAAM,GAAG,KAAvD,EAA8D;AAC5D,QAAI,CAACC,gBAAEC,QAAF,CAAWL,IAAX,CAAL,EAAuB;AACrB,YAAM,IAAIM,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,UAAMC,KAAK,GAAG,uBAASC,MAAT,CAAgB,YAAhB,CAAd;AACAR,IAAAA,IAAI,GAAGA,IAAI,CAACS,WAAL,GAAmBC,IAAnB,EAAP;;AAEA,QAAI,CAACV,IAAI,CAACW,QAAL,CAAc,GAAd,CAAL,EAAyB;AACvBX,MAAAA,IAAI,IAAI,GAAR;AACD;;AAED,UAAMY,MAAM,GAAG,MAAMf,IAAI,CAAC,kBAAD,CAAJ,CAClBgB,KADkB,CACZ,MADY,EACJN,KADI,EAElBO,QAFkB,CAET,OAFS,EAEAnB,KAFA,EAGlBmB,QAHkB,CAGT,MAHS,EAGDd,IAHC,EAIlBD,MAJkB,CAIX,OAJW,EAIFE,SAJE,EAKlBc,IALkB,EAArB;;AAOA,QAAIH,MAAM,IAAI,CAAV,IAAe,CAACT,MAApB,EAA4B;AAC1B,YAAMN,IAAI,CAAC,kBAAD,CAAJ,CACHmB,MADG,CACI;AACNrB,QAAAA,KADM;AAENK,QAAAA,IAAI,EAAEA,IAFA;AAGNiB,QAAAA,IAAI,EAAEV,KAHA;AAINW,QAAAA,KAAK,EAAEhB;AAJD,OADJ,EAOHiB,KAPG,CAOGC,GAAG,IAAI;AACZ,eAAOrB,MAAM,CAACC,IAAD,EAAOC,SAAP,EAAkBC,KAAlB,EAAyB,IAAzB,CAAb;AACD,OATG,CAAN;AAUD;AACF;;AAED,iBAAemB,SAAf,CAAyBrB,IAAzB,EAA+BkB,KAAK,GAAG,CAAvC,EAA0C;AACxC,QAAI,CAACd,gBAAEkB,QAAF,CAAWJ,KAAX,CAAL,EAAwB;AACtB,YAAM,IAAIZ,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,UAAMiB,UAAU,GAAGL,KAAK,GAAG,CAAR,GAAY,aAAaM,IAAI,CAACC,GAAL,CAASP,KAAT,CAAzB,GAA2C,aAAaM,IAAI,CAACC,GAAL,CAASP,KAAT,CAA3E;AAEA,WAAOnB,MAAM,CAACC,IAAD,EAAOH,IAAI,CAAC6B,GAAL,CAASH,UAAT,CAAP,EAA6BL,KAA7B,CAAb;AACD;;AAED,iBAAeS,SAAf,CAAyB3B,IAAzB,EAA+BkB,KAAK,GAAG,CAAvC,EAA0C;AACxC,WAAOG,SAAS,CAACrB,IAAD,EAAOkB,KAAK,GAAG,CAAC,CAAhB,CAAhB;AACD;;AAED,iBAAeU,GAAf,CAAmB5B,IAAnB,EAAyBkB,KAAK,GAAG,CAAjC,EAAoC;AAClC,WAAOnB,MAAM,CAACC,IAAD,EAAOkB,KAAP,EAAcA,KAAd,CAAb;AACD,GArD+B,CAuDhC;;;AACA,WAASW,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAI,CAAC1B,gBAAEO,QAAF,CAAW,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,EAAkC,UAAlC,CAAX,EAA0DmB,KAAK,CAACC,IAAhE,CAAL,EAA4E;AAC1E,YAAM,IAAIzB,KAAJ,CAAU,2BAA2BwB,KAAK,CAACC,IAA3C,CAAN;AACD;;AAEDnC,IAAAA,MAAM,CAACoC,IAAP,CAAYF,KAAZ;AACD;;AAED,QAAMG,gBAAgB,GAAG,OAAOC,IAAP,EAAaC,EAAb,EAAiBC,QAAjB,KAA8B;AACrD,UAAMC,gBAAgB,GAAG,YAAW;AAClC,WAAKC,MAAL,CAAYzC,IAAI,CAAC6B,GAAL,CAAS,eAAT,CAAZ,EACGQ,IADH,CACQ,kBADR,EAEGrB,KAFH,CAES,MAFT,EAEiB,IAFjB,EAEuBqB,IAFvB,EAGGpB,QAHH,CAGY,OAHZ,EAGqBnB,KAHrB,EAIGmB,QAJH,CAIY,MAJZ,EAIoB,IAJpB,EAI0BqB,EAJ1B,EAKGrB,QALH,CAKY,MALZ,EAKoB,MALpB,EAK4BsB,QAAQ,GAAG,IALvC,EAMGG,EANH,CAMM,IANN;AAOD,KARD;;AAUA,UAAM;AAAErB,MAAAA;AAAF,QAAY,MAAMrB,IAAI,CACzBqB,KADqB,CACf,GADe,EAErBgB,IAFqB,CAEhBG,gBAFgB,EAGrBG,KAHqB,EAAxB;AAKA,WAAOtB,KAAP;AACD,GAjBD;;AAmBA,QAAMuB,OAAO,GAAG;AACdvB,IAAAA,KAAK,EAAE,gBAAeY,KAAf,EAAsBI,IAAtB,EAA4BC,EAA5B,EAAgC;AACrC,YAAMC,QAAQ,GAAGhC,gBAAEoC,KAAF,CAAQV,KAAK,CAACY,SAAd,CAAjB;;AAEA,YAAMC,IAAI,GAAG,MAAM9C,IAAI,CAAC,kBAAD,CAAJ,CAChByC,MADgB,CACT,CAAC,MAAD,EAASzC,IAAI,CAAC6B,GAAL,CAAS,qBAAT,CAAT,CADS,EAEhBb,KAFgB,CAEV,MAFU,EAEF,IAFE,EAEIqB,IAFJ,EAGhBpB,QAHgB,CAGP,OAHO,EAGEnB,KAHF,EAIhBmB,QAJgB,CAIP,MAJO,EAIC,IAJD,EAIOqB,EAJP,EAKhBrB,QALgB,CAKP,YAAW;AACnB,YAAIsB,QAAQ,CAACQ,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA7B,EAAgC;AAC9B,iBAAO,KAAK/B,KAAL,CAAW,MAAX,EAAmB,MAAnB,EAA2BuB,QAA3B,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,KAAKvB,KAAL,CAAW,MAAX,EAAmB,MAAnB,EAA2BuB,QAAQ,GAAG,IAAtC,CAAP;AACD;AACF,OAXgB,EAYhBS,OAZgB,CAYR,MAZQ,EAahB9B,IAbgB,CAaX4B,IAAI,IAAIA,IAAI,CAACG,GAAL,CAASC,GAAG,KAAK,EAAE,GAAGA,GAAL;AAAU7B,QAAAA,KAAK,EAAE8B,QAAQ,CAACD,GAAG,CAAC7B,KAAL;AAAzB,OAAL,CAAZ,CAbG,CAAnB;AAeA,aAAO,EAAE,GAAGY,KAAL;AAAYmB,QAAAA,OAAO,EAAEN;AAArB,OAAP;AACD,KApBa;;AAsBd,UAAMO,SAAN,CAAgBpB,KAAhB,EAAuBI,IAAvB,EAA6BC,EAA7B,EAAiC;AAC/B,YAAMC,QAAQ,GAAGhC,gBAAEoC,KAAF,CAAQV,KAAK,CAACY,SAAd,CAAjB;;AACA,YAAMQ,SAAS,GAAG,MAAMjB,gBAAgB,CAACC,IAAD,EAAOC,EAAP,EAAWC,QAAX,CAAxC;AACA,YAAMa,OAAO,GAAG,MAAM,KAAK/B,KAAL,CAAWY,KAAX,EAAkBI,IAAlB,EAAwBC,EAAxB,CAAtB;AACA,aAAO,EAAE,GAAGL,KAAL;AAAY,WAAGmB,OAAf;AAAwBC,QAAAA;AAAxB,OAAP;AACD,KA3Ba;;AA6BdC,IAAAA,OAAO,EAAE,gBAAerB,KAAf,EAAsBI,IAAtB,EAA4BC,EAA5B,EAAgC;AACvC,YAAMiB,SAAS,GAAGhD,gBAAEoC,KAAF,CAAQV,KAAK,CAACY,SAAd,CAAlB;;AACA,YAAMW,SAAS,GAAGjD,gBAAEkD,IAAF,CAAOxB,KAAK,CAACY,SAAb,CAAlB;;AAEA,YAAMa,MAAM,GAAG,MAAMd,OAAO,CAACvB,KAAR,CAAc;AAAEwB,QAAAA,SAAS,EAAE,CAACU,SAAD;AAAb,OAAd,EAA0ClB,IAA1C,EAAgDC,EAAhD,CAArB;AACA,YAAMqB,MAAM,GAAG,MAAMf,OAAO,CAACvB,KAAR,CAAc;AAAEwB,QAAAA,SAAS,EAAE,CAACW,SAAD;AAAb,OAAd,EAA0CnB,IAA1C,EAAgDC,EAAhD,CAArB;;AAEA,YAAMsB,QAAQ,GAAGrD,gBAAEsD,IAAF,CAAO,CAAC,GAAGtD,gBAAE0C,GAAF,CAAMS,MAAM,CAACN,OAAb,EAAsB,MAAtB,CAAJ,EAAmC,GAAG7C,gBAAE0C,GAAF,CAAMU,MAAM,CAACP,OAAb,EAAsB,MAAtB,CAAtC,CAAP,CAAjB;;AACA,YAAMU,OAAO,GAAGF,QAAQ,CAACX,GAAT,CAAa7B,IAAI,IAAI,CACnCb,gBAAEwD,IAAF,CAAOL,MAAM,CAACN,OAAd,EAAuB;AAAEhC,QAAAA;AAAF,OAAvB,KAAoC;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYD,QAAAA;AAAZ,OADD,EAEnCb,gBAAEwD,IAAF,CAAOJ,MAAM,CAACP,OAAd,EAAuB;AAAEhC,QAAAA;AAAF,OAAvB,KAAoC;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYD,QAAAA;AAAZ,OAFD,CAArB,CAAhB;AAKA,YAAMgC,OAAO,GAAGU,OAAO,CAACb,GAAR,CAAY,CAAC,CAACe,EAAD,EAAKC,EAAL,CAAD,KAAc;AACxC,cAAMX,OAAO,GAAG/C,gBAAE2D,UAAF,CAAajC,KAAK,CAACkC,EAAnB,IACZlC,KAAK,CAACkC,EAAN,CAAS5D,gBAAE6D,GAAF,CAAMJ,EAAN,EAAU,OAAV,CAAT,EAA6BzD,gBAAE6D,GAAF,CAAMH,EAAN,EAAU,OAAV,CAA7B,CADY,GAEZ1D,gBAAE6D,GAAF,CAAMJ,EAAN,EAAU,OAAV,IAAqBzD,gBAAE6D,GAAF,CAAMH,EAAN,EAAU,OAAV,CAFzB;AAGA,eAAO;AAAE7C,UAAAA,IAAI,EAAE4C,EAAE,CAAC5C,IAAX;AAAiBkC,UAAAA,OAAO,EAAEA,OAAO,GAAG,CAAV,GAAc,CAAd,GAAkBA;AAA5C,SAAP;AACD,OALe,CAAhB;AAOA,UAAIA,OAAO,GAAGe,SAAd;;AACA,UAAIpC,KAAK,CAACqC,KAAV,EAAiB;AACf,cAAMC,MAAM,GAAG,MAAMnC,gBAAgB,CAACC,IAAD,EAAOC,EAAP,EAAWiB,SAAX,CAArC;AACA,cAAMiB,MAAM,GAAG,MAAMpC,gBAAgB,CAACC,IAAD,EAAOC,EAAP,EAAWkB,SAAX,CAArC;AACAF,QAAAA,OAAO,GAAGrB,KAAK,CAACqC,KAAN,CAAYC,MAAZ,EAAoBC,MAApB,IAA8B,GAAxC;AACD;;AAED,aAAO,EAAE,GAAGvC,KAAL;AAAYmB,QAAAA,OAAZ;AAAqBE,QAAAA;AAArB,OAAP;AACD,KAzDa;AA2DdmB,IAAAA,QAAQ,EAAE,gBAAexC,KAAf,EAAsBI,IAAtB,EAA4BC,EAA5B,EAAgC;AACxC,YAAMC,QAAQ,GAAGhC,gBAAEoC,KAAF,CAAQV,KAAK,CAACY,SAAd,CAAjB;;AAEA,YAAMC,IAAI,GAAG,MAAM9C,IAAI,CAAC,kBAAD,CAAJ,CAChByC,MADgB,CACT,CAAC,MAAD,EAASzC,IAAI,CAAC6B,GAAL,CAAS,qBAAT,CAAT,CADS,EAEhBb,KAFgB,CAEV,MAFU,EAEF,IAFE,EAEIqB,IAFJ,EAGhBpB,QAHgB,CAGP,OAHO,EAGEnB,KAHF,EAIhBmB,QAJgB,CAIP,MAJO,EAIC,IAJD,EAIOqB,EAJP,EAKhBrB,QALgB,CAKP,MALO,EAKC,MALD,EAKSsB,QAAQ,GAAG,IALpB,EAMhBS,OANgB,CAMR,MANQ,EAOhB9B,IAPgB,CAOX4B,IAAI,IAAI;AACZ,eAAOA,IAAI,CAACG,GAAL,CAASC,GAAG,IAAI;AACrB,gBAAM/C,IAAI,GAAGI,gBAAEmE,IAAF,CAAOxB,GAAG,CAAC/C,IAAJ,CAASwE,KAAT,CAAe,GAAf,CAAP,EAA4BC,IAA5B,CAAiC,GAAjC,CAAb;;AAEA,iBAAO,EAAE,GAAG1B,GAAL;AAAU/C,YAAAA,IAAI,EAAEI,gBAAEsE,OAAF,CAAU1E,IAAV,IAAkB,SAAlB,GAA8BA,IAA9C;AAAoDkB,YAAAA,KAAK,EAAE8B,QAAQ,CAACD,GAAG,CAAC7B,KAAL;AAAnE,WAAP;AACD,SAJM,CAAP;AAKD,OAbgB,CAAnB;AAeA,aAAO,EAAE,GAAGY,KAAL;AAAYmB,QAAAA,OAAO,EAAEN;AAArB,OAAP;AACD;AA9Ea,GAAhB;;AAiFA,WAASgC,MAAT,CAAgBzC,IAAhB,EAAsBC,EAAtB,EAA0B;AACxB,WAAOyC,OAAO,CAAC9B,GAAR,CAAYlD,MAAZ,EAAoBkC,KAAK,IAAIW,OAAO,CAACX,KAAK,CAAC,MAAD,CAAN,CAAP,CAAuBA,KAAvB,EAA8BI,IAA9B,EAAoCC,EAApC,CAA7B,CAAP;AACD;;AAED,SAAO;AAAEd,IAAAA,SAAF;AAAaM,IAAAA,SAAb;AAAwBC,IAAAA,GAAxB;AAA6BC,IAAAA,QAA7B;AAAuC8C,IAAAA;AAAvC,GAAP;AACD,C","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import _ from 'lodash'\nimport moment from 'moment'\n\nexport default ({ bp, botId }) => {\n  const graphs = []\n  const knex = bp.database\n\n  async function update(name, operation, value, racing = false) {\n    if (!_.isString(name)) {\n      throw new Error('Invalid name, expected a string')\n    }\n\n    const today = moment().format('YYYY-MM-DD')\n    name = name.toLowerCase().trim()\n\n    if (!name.includes('~')) {\n      name += '~'\n    }\n\n    const result = await knex('analytics_custom')\n      .where('date', today)\n      .andWhere('botId', botId)\n      .andWhere('name', name)\n      .update('count', operation)\n      .then()\n\n    if (result == 0 && !racing) {\n      await knex('analytics_custom')\n        .insert({\n          botId,\n          name: name,\n          date: today,\n          count: value\n        })\n        .catch(err => {\n          return update(name, operation, value, true)\n        })\n    }\n  }\n\n  async function increment(name, count = 1) {\n    if (!_.isNumber(count)) {\n      throw new Error('Invalid count increment, expected a valid number')\n    }\n\n    const countQuery = count < 0 ? 'count - ' + Math.abs(count) : 'count + ' + Math.abs(count)\n\n    return update(name, knex.raw(countQuery), count)\n  }\n\n  async function decrement(name, count = 1) {\n    return increment(name, count * -1)\n  }\n\n  async function set(name, count = 1) {\n    return update(name, count, count)\n  }\n\n  // { name, type, description, variables }\n  function addGraph(graph) {\n    if (!_.includes(['count', 'countUniq', 'percent', 'piechart'], graph.type)) {\n      throw new Error('Unknown graph of type ' + graph.type)\n    }\n\n    graphs.push(graph)\n  }\n\n  const countUniqRecords = async (from, to, variable) => {\n    const uniqRecordsQuery = function() {\n      this.select(knex.raw('distinct name'))\n        .from('analytics_custom')\n        .where('date', '>=', from)\n        .andWhere('botId', botId)\n        .andWhere('date', '<=', to)\n        .andWhere('name', 'LIKE', variable + '~%')\n        .as('t1')\n    }\n\n    const { count } = await knex\n      .count('*')\n      .from(uniqRecordsQuery)\n      .first()\n\n    return count\n  }\n\n  const getters = {\n    count: async function(graph, from, to) {\n      const variable = _.first(graph.variables) as string\n\n      const rows = await knex('analytics_custom')\n        .select(['date', knex.raw('sum(count) as count')])\n        .where('date', '>=', from)\n        .andWhere('botId', botId)\n        .andWhere('date', '<=', to)\n        .andWhere(function() {\n          if (variable.indexOf('~') > -1) {\n            return this.where('name', 'LIKE', variable)\n          } else {\n            return this.where('name', 'LIKE', variable + '~%')\n          }\n        })\n        .groupBy('date')\n        .then(rows => rows.map(row => ({ ...row, count: parseInt(row.count) })))\n\n      return { ...graph, results: rows }\n    },\n\n    async countUniq(graph, from, to) {\n      const variable = _.first(graph.variables)\n      const countUniq = await countUniqRecords(from, to, variable)\n      const results = await this.count(graph, from, to)\n      return { ...graph, ...results, countUniq }\n    },\n\n    percent: async function(graph, from, to) {\n      const variable1 = _.first(graph.variables)\n      const variable2 = _.last(graph.variables)\n\n      const count1 = await getters.count({ variables: [variable1] }, from, to)\n      const count2 = await getters.count({ variables: [variable2] }, from, to)\n\n      const allDates = _.uniq([..._.map(count1.results, 'date'), ..._.map(count2.results, 'date')])\n      const records = allDates.map(date => [\n        _.find(count1.results, { date }) || { count: 0, date },\n        _.find(count2.results, { date }) || { count: 1, date }\n      ])\n\n      const results = records.map(([n1, n2]) => {\n        const percent = _.isFunction(graph.fn)\n          ? graph.fn(_.get(n1, 'count'), _.get(n2, 'count'))\n          : _.get(n1, 'count') / _.get(n2, 'count')\n        return { date: n1.date, percent: percent > 1 ? 1 : percent }\n      })\n\n      let percent = undefined\n      if (graph.fnAvg) {\n        const n1Uniq = await countUniqRecords(from, to, variable1)\n        const n2Uniq = await countUniqRecords(from, to, variable2)\n        percent = graph.fnAvg(n1Uniq, n2Uniq) * 100\n      }\n\n      return { ...graph, results, percent }\n    },\n\n    piechart: async function(graph, from, to) {\n      const variable = _.first(graph.variables)\n\n      const rows = await knex('analytics_custom')\n        .select(['name', knex.raw('sum(count) as count')])\n        .where('date', '>=', from)\n        .andWhere('botId', botId)\n        .andWhere('date', '<=', to)\n        .andWhere('name', 'LIKE', variable + '~%')\n        .groupBy('name')\n        .then(rows => {\n          return rows.map(row => {\n            const name = _.drop(row.name.split('~')).join('~')\n\n            return { ...row, name: _.isEmpty(name) ? 'unknown' : name, count: parseInt(row.count) }\n          })\n        })\n\n      return { ...graph, results: rows }\n    }\n  }\n\n  function getAll(from, to) {\n    return Promise.map(graphs, graph => getters[graph['type']](graph, from, to))\n  }\n\n  return { increment, decrement, set, addGraph, getAll }\n}\n"]}