{"version":3,"sources":["analytics.ts"],"names":["Analytics","constructor","bp","botId","_knex","_stats","Stats","_task","UpdateTask","_getInterval","custom","start","runTask","_updateData","stop","getAnalyticsMetadata","timestamp","getLastRun","lastRun","elasped","moment","duration","diff","humanize","lastUpdated","size","_getDBSize","totalUsers","getTotalUsers","activeUsers","getDailyActiveUsers","interactionsRange","getInteractionRanges","avgInteractions","getAverageInteractions","nbUsers","getNumberOfUsers","rentention","usersRetention","busyHours","getBusyHours","_savePartialData","fictiveSpecificMetrics","numberOfInteractionInAverage","numberOfUsersToday","today","numberOfUsersYesterday","yesterday","numberOfUsersThisWeek","week","retentionHeatMap","busyHoursHeatMap","setLastRun","getChartsGraphData","analytics","kvs","get","loading","noData","totalUsersChartData","activeUsersChartData","genderUsageChartData","typicalConversationLengthInADay","specificMetricsForLastDays","database","isLite","fs","statSync","location","property","data","set"],"mappings":"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","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import { SDK } from 'botpress'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport ms from 'ms'\n\nimport CustomAnalytics from './custom-analytics'\nimport Stats from './stats'\nimport { UpdateTask } from './task'\nimport { CustomAnalytics as CustomAnalyticsType } from './typings'\n\nexport default class Analytics {\n  private _knex\n  private _stats\n  private _task\n  public custom: CustomAnalyticsType\n\n  constructor(private bp: SDK, private botId: string) {\n    this._knex = bp['database']\n    this._stats = new Stats(this._knex)\n    this._task = new UpdateTask(this.bp, this._getInterval())\n    this.custom = CustomAnalytics({ bp, botId })\n  }\n\n  public async start() {\n    this._task.runTask = async () => {\n      await this._updateData()\n    }\n\n    await this._task.start(this.botId)\n  }\n\n  public async stop() {\n    await this._task.stop(this.botId)\n  }\n\n  public async getAnalyticsMetadata() {\n    const timestamp = await this._stats.getLastRun()\n    const lastRun = moment(timestamp)\n    const elasped = moment.duration(moment().diff(lastRun)).humanize()\n    return { lastUpdated: elasped, size: this._getDBSize() }\n  }\n\n  private async _updateData() {\n    const totalUsers = await this._stats.getTotalUsers()\n    const activeUsers = await this._stats.getDailyActiveUsers()\n    const interactionsRange = await this._stats.getInteractionRanges()\n    const avgInteractions = await this._stats.getAverageInteractions()\n    const nbUsers = await this._stats.getNumberOfUsers()\n    const rentention = await this._stats.usersRetention()\n    const busyHours = await this._stats.getBusyHours()\n\n    await this._savePartialData(this.botId, 'analytics', {\n      totalUsers: totalUsers || 0,\n      activeUsers,\n      interactionsRange: interactionsRange,\n      fictiveSpecificMetrics: {\n        numberOfInteractionInAverage: avgInteractions,\n        numberOfUsersToday: nbUsers.today,\n        numberOfUsersYesterday: nbUsers.yesterday,\n        numberOfUsersThisWeek: nbUsers.week\n      },\n      retentionHeatMap: rentention,\n      busyHoursHeatMap: busyHours\n    })\n    await this._stats.setLastRun()\n  }\n\n  public async getChartsGraphData() {\n    const analytics = await this.bp.kvs.get(this.botId, 'analytics')\n\n    if (!analytics) {\n      return {}\n    }\n\n    return {\n      loading: false,\n      noData: false,\n      totalUsersChartData: analytics['totalUsers'] || [],\n      activeUsersChartData: analytics['activeUsers'] || [],\n      genderUsageChartData: analytics['genderUsage'] || [],\n      typicalConversationLengthInADay: analytics['interactionsRange'] || [],\n      specificMetricsForLastDays: analytics['fictiveSpecificMetrics'] || {},\n      retentionHeatMap: analytics['retentionHeatMap'] || [],\n      busyHoursHeatMap: analytics['busyHoursHeatMap'] || []\n    }\n  }\n\n  private _getDBSize() {\n    if (this.bp.database.isLite) {\n      return fs.statSync(this.bp.database.location)['size'] / 1000000.0 // in megabytes\n    } else {\n      return 1\n    }\n  }\n\n  private _getInterval() {\n    return this._getDBSize() < 5 ? ms('5m') : ms('1h')\n  }\n\n  private async _savePartialData(botId: string, property, data) {\n    await this.bp.kvs.set(botId, property, data)\n  }\n}\n"]}