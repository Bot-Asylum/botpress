{"version":3,"sources":["db.ts"],"names":["MAX_CHAR_LEN","extractText","event","payload","text","substr","AnalyticsDb","constructor","bp","knex","Error","createTableIfNotExists","table","increments","primary","timestamp","string","enu","then","integer","unique","interactionRow","ts","date","now","type","channel","user_id","target","direction","insert","database"],"mappings":";;;;;;;;;AAIA,MAAMA,YAAY,GAAG,GAArB;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI,CAAEA,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACC,OAAN,CAAcC,IAAhC,IAAyC,EAA1C,EAA8CC,MAA9C,CAAqD,CAArD,EAAwDL,YAAxD,CAA7B;;AAEe,MAAMM,WAAN,CAAkB;AAG/BC,EAAAA,WAAW,CAACC,EAAD,EAAU;AAAA;;AAAA,0CAIN,MAAM;AACnB,UAAI,CAAC,KAAKC,IAAV,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,aAAO,KAAKD,IAAL,CACJE,sBADI,CACmB,wBADnB,EAC6CC,KAAK,IAAI;AACzDA,QAAAA,KAAK,CAACC,UAAN,CAAiB,IAAjB,EAAuBC,OAAvB;AACAF,QAAAA,KAAK,CAACG,SAAN,CAAgB,IAAhB;AACAH,QAAAA,KAAK,CAACI,MAAN,CAAa,MAAb;AACAJ,QAAAA,KAAK,CAACI,MAAN,CAAa,MAAb;AACAJ,QAAAA,KAAK,CAACI,MAAN,CAAa,SAAb;AACAJ,QAAAA,KAAK,CAACI,MAAN,CAAa,SAAb;AACAJ,QAAAA,KAAK,CAACK,GAAN,CAAU,WAAV,EAAuB,CAAC,IAAD,EAAO,KAAP,CAAvB;AACD,OATI,EAUJC,IAVI,CAUC,MAAM;AACV,eAAO,KAAKT,IAAL,CAAUE,sBAAV,CAAiC,gBAAjC,EAAmDC,KAAK,IAAI;AACjEA,UAAAA,KAAK,CAACC,UAAN,CAAiB,IAAjB,EAAuBC,OAAvB;AACAF,UAAAA,KAAK,CAACG,SAAN,CAAgB,IAAhB;AACD,SAHM,CAAP;AAID,OAfI,EAgBJG,IAhBI,CAgBC,MAAM;AACV,eAAO,KAAKT,IAAL,CAAUE,sBAAV,CAAiC,kBAAjC,EAAqDC,KAAK,IAAI;AACnEA,UAAAA,KAAK,CAACI,MAAN,CAAa,OAAb;AACAJ,UAAAA,KAAK,CAACI,MAAN,CAAa,MAAb;AACAJ,UAAAA,KAAK,CAACI,MAAN,CAAa,MAAb;AACAJ,UAAAA,KAAK,CAACO,OAAN,CAAc,OAAd;AACAP,UAAAA,KAAK,CAACQ,MAAN,CAAa,CAAC,MAAD,EAAS,MAAT,CAAb;AACD,SANM,CAAP;AAOD,OAxBI,EAyBJF,IAzBI,CAyBC,MAAM,KAAKT,IAzBZ,CAAP;AA0BD,KAnCoB;;AAAA,0CAqCNP,KAAK,IAAI;AACtB,YAAMmB,cAAc,GAAG;AACrBC,QAAAA,EAAE,EAAE,KAAKb,IAAL,CAAUc,IAAV,CAAeC,GAAf,EADiB;AAErBC,QAAAA,IAAI,EAAEvB,KAAK,CAACuB,IAFS;AAGrBrB,QAAAA,IAAI,EAAEH,WAAW,CAACC,KAAD,CAHI;AAIrBwB,QAAAA,OAAO,EAAExB,KAAK,CAACwB,OAJM;AAKrBC,QAAAA,OAAO,EAAEzB,KAAK,CAAC0B,MALM;AAMrBC,QAAAA,SAAS,EAAE;AANU,OAAvB;AASA,aAAO,KAAKpB,IAAL,CAAU,wBAAV,EAAoCqB,MAApC,CAA2CT,cAA3C,CAAP;AACD,KAhDoB;;AAAA,0CAkDNnB,KAAK,IAAI;AACtB,YAAMmB,cAAc,GAAG;AACrBC,QAAAA,EAAE,EAAE,KAAKb,IAAL,CAAUc,IAAV,CAAeC,GAAf,EADiB;AAErBC,QAAAA,IAAI,EAAEvB,KAAK,CAACuB,IAFS;AAGrBrB,QAAAA,IAAI,EAAEH,WAAW,CAACC,KAAD,CAHI;AAIrBwB,QAAAA,OAAO,EAAExB,KAAK,CAACwB,OAJM;AAKrBC,QAAAA,OAAO,EAAEzB,KAAK,CAAC0B,MALM;AAMrBC,QAAAA,SAAS,EAAE;AANU,OAAvB;AASA,aAAO,KAAKpB,IAAL,CAAU,wBAAV,EAAoCqB,MAApC,CAA2CT,cAA3C,CAAP;AACD,KA7DoB;;AACnB,SAAKZ,IAAL,GAAYD,EAAE,CAACuB,QAAf;AACD;;AAL8B","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import _ from 'lodash'\n\nimport { SDK } from '.'\n\nconst MAX_CHAR_LEN = 254\nconst extractText = event => ((event.payload && event.payload.text) || '').substr(0, MAX_CHAR_LEN)\n\nexport default class AnalyticsDb {\n  knex: any\n\n  constructor(bp: SDK) {\n    this.knex = bp.database\n  }\n\n  initializeDb = () => {\n    if (!this.knex) {\n      throw new Error('you must initialize the database before')\n    }\n\n    return this.knex\n      .createTableIfNotExists('analytics_interactions', table => {\n        table.increments('id').primary()\n        table.timestamp('ts')\n        table.string('type')\n        table.string('text')\n        table.string('channel')\n        table.string('user_id')\n        table.enu('direction', ['in', 'out'])\n      })\n      .then(() => {\n        return this.knex.createTableIfNotExists('analytics_runs', table => {\n          table.increments('id').primary()\n          table.timestamp('ts')\n        })\n      })\n      .then(() => {\n        return this.knex.createTableIfNotExists('analytics_custom', table => {\n          table.string('botId')\n          table.string('date')\n          table.string('name')\n          table.integer('count')\n          table.unique(['date', 'name'])\n        })\n      })\n      .then(() => this.knex)\n  }\n\n  saveIncoming = event => {\n    const interactionRow = {\n      ts: this.knex.date.now(),\n      type: event.type,\n      text: extractText(event),\n      channel: event.channel,\n      user_id: event.target,\n      direction: 'in'\n    }\n\n    return this.knex('analytics_interactions').insert(interactionRow)\n  }\n\n  saveOutgoing = event => {\n    const interactionRow = {\n      ts: this.knex.date.now(),\n      type: event.type,\n      text: extractText(event),\n      channel: event.channel,\n      user_id: event.target,\n      direction: 'out'\n    }\n\n    return this.knex('analytics_interactions').insert(interactionRow)\n  }\n}\n"]}