{"version":3,"sources":["db.ts"],"names":["TABLE_NAME","AnalyticsDatabase","constructor","db","insert","args","trx","botId","channel","metric","value","query","metric_name","created_on","date","now","transacting","update","id","updated_on","where","insertOrUpdate","def","increment","analytics","get","latest","startOf","today","isBefore","method","AnalyticsMethod","IncrementDaily","IncrementTotal","Replace","insertMany","metricDefs","transaction","Promise","mapSeries","commit","err","rollback","select","orderBy","first","getBetweenDates","startDate","endDate","includeEndDate","add","whereBetween","toISOString","andWhere"],"mappings":"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","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import { Analytics, AnalyticsMethod, AnalyticsMetric, database, MetricDefinition } from 'botpress/sdk'\nimport Knex from 'knex'\nimport moment from 'moment'\n\nconst TABLE_NAME = 'srv_analytics'\n\nexport class AnalyticsDatabase {\n  constructor(private db: typeof database) {}\n\n  async insert(args: { botId: string; channel: string; metric: string; value: number }, trx?: Knex.Transaction) {\n    const { botId, channel, metric, value } = args\n    let query = this.db(TABLE_NAME).insert({\n      botId,\n      channel,\n      metric_name: metric,\n      value,\n      created_on: this.db.date.now()\n    })\n\n    if (trx) {\n      query = query.transacting(trx)\n    }\n    return query\n  }\n\n  async update(id: number, value: number, trx?: Knex.Transaction) {\n    let query = this.db(TABLE_NAME)\n      .update({ value, updated_on: this.db.date.now() })\n      .where({ id })\n\n    if (trx) {\n      query = query.transacting(trx)\n    }\n    return query\n  }\n\n  async insertOrUpdate(def: MetricDefinition, trx?: Knex.Transaction) {\n    const { botId, channel, metric } = def\n    const value = def.increment || 1\n    const analytics = await this.get({ botId, channel, metric }, trx)\n    if (!analytics) {\n      return this.insert({ botId, channel, metric, value: value }, trx)\n    }\n\n    // Aggregate metrics per day\n    const latest = moment(analytics.created_on).startOf('day')\n    const today = moment().startOf('day')\n\n    if (latest.isBefore(today) && def.method === AnalyticsMethod.IncrementDaily) {\n      return this.insert({ botId, channel, metric, value }, trx)\n    } else if (latest.isBefore(today) && def.method === AnalyticsMethod.IncrementTotal) {\n      return this.insert({ botId, channel, metric, value: analytics.value + value }, trx)\n    } else if (latest.isBefore(today) && def.method === AnalyticsMethod.Replace) {\n      return this.insert({ botId, channel, metric, value }, trx)\n    } else if (def.method === AnalyticsMethod.Replace) {\n      return this.update(analytics.id, value, trx)\n    } else {\n      return this.update(analytics.id, analytics.value + value, trx)\n    }\n  }\n\n  async insertMany(metricDefs: MetricDefinition[]): Promise<void> {\n    const trx = await this.db.transaction()\n    try {\n      await Promise.mapSeries(metricDefs, def => this.insertOrUpdate(def, trx))\n      await trx.commit()\n    } catch (err) {\n      await trx.rollback(err)\n    }\n  }\n\n  async get(\n    args: { botId: string; channel: string; metric: string },\n    trx?: Knex.Transaction\n  ): Promise<Analytics | undefined> {\n    const { botId, channel, metric } = args\n    let query = this.db(TABLE_NAME)\n      .select()\n      .where({ botId, channel, metric_name: metric })\n      .orderBy('created_on', 'desc')\n      .first()\n\n    if (trx) {\n      query = query.transacting(trx)\n    }\n\n    return query\n  }\n\n  async getBetweenDates(botId: string, startDate: Date, endDate: Date, channel?: string): Promise<Analytics[]> {\n    const includeEndDate = moment(endDate).add(1, 'day')\n\n    let query = this.db(TABLE_NAME)\n      .select()\n      .whereBetween('created_on', [startDate.toISOString(), includeEndDate.toISOString()])\n      .andWhere({ botId })\n\n    if (channel) {\n      query = query.andWhere({ channel })\n    }\n\n    return query\n  }\n}\n"]}