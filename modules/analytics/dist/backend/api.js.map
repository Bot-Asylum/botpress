{"version":3,"sources":["api.ts"],"names":["db","router","http","createRouterForBot","checkAuthentication","enableJsonBodyParser","get","req","res","botId","channel","params","start","end","query","startDate","unixToDate","endDate","analytics","getBetweenDates","undefined","send","map","toDto","err","status","message","_","pick","unix","momentDate","moment","isValid","Error","toDate"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;eAIgBA,EAAD,IAA2B;AACxC,QAAMC,MAAM,GAAGC,UAAKC,kBAAL,CAAwB,WAAxB,EAAqC;AAAEC,IAAAA,mBAAmB,EAAE,IAAvB;AAA6BC,IAAAA,oBAAoB,EAAE;AAAnD,GAArC,CAAf;;AAEAJ,EAAAA,MAAM,CAACK,GAAP,CAAW,mBAAX,EAAgC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClD,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAqBH,GAAG,CAACI,MAA/B;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiBN,GAAG,CAACO,KAA3B;AAEA,UAAMC,SAAS,GAAGC,UAAU,CAACJ,KAAD,CAA5B;AACA,UAAMK,OAAO,GAAGD,UAAU,CAACH,GAAD,CAA1B;;AAEA,QAAI;AACF,UAAI,CAACH,OAAD,IAAYA,OAAO,KAAK,KAA5B,EAAmC;AACjC,cAAMQ,SAAS,GAAG,MAAMlB,EAAE,CAACmB,eAAH,CAAmBV,KAAnB,EAA0BM,SAA1B,EAAqCE,OAArC,EAA8CG,SAA9C,CAAxB;AACAZ,QAAAA,GAAG,CAACa,IAAJ,CAASH,SAAS,CAACI,GAAV,CAAcC,KAAd,CAAT;AACD,OAHD,MAGO;AACL,cAAML,SAAS,GAAG,MAAMlB,EAAE,CAACmB,eAAH,CAAmBV,KAAnB,EAA0BM,SAA1B,EAAqCE,OAArC,EAA8CP,OAA9C,CAAxB;AACAF,QAAAA,GAAG,CAACa,IAAJ,CAASH,SAAS,CAACI,GAAV,CAAcC,KAAd,CAAT;AACD;AACF,KARD,CAQE,OAAOC,GAAP,EAAY;AACZhB,MAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBG,GAAG,CAACE,OAAzB;AACD;AACF,GAlBD;;AAoBA,QAAMH,KAAK,GAAIL,SAAD,IAAmC;AAC/C,WAAOS,gBAAEC,IAAF,CAAOV,SAAP,EAAkB,CAAC,aAAD,EAAgB,OAAhB,EAAyB,YAAzB,EAAuC,SAAvC,CAAlB,CAAP;AACD,GAFD;;AAIA,QAAMF,UAAU,GAAGa,IAAI,IAAI;AACzB,UAAMC,UAAU,GAAGC,gBAAOF,IAAP,CAAYA,IAAZ,CAAnB;;AACA,QAAI,CAACC,UAAU,CAACE,OAAX,EAAL,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CAAW,iCAAgCJ,IAAK,GAAhD,CAAN;AACD;;AAED,WAAOC,UAAU,CAACI,MAAX,EAAP;AACD,GAPD;AAQD,C","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import { Analytics, http } from 'botpress/sdk'\nimport _ from 'lodash'\nimport moment from 'moment'\n\nimport { AnalyticsDatabase } from './db'\n\nexport default (db: AnalyticsDatabase) => {\n  const router = http.createRouterForBot('analytics', { checkAuthentication: true, enableJsonBodyParser: true })\n\n  router.get('/channel/:channel', async (req, res) => {\n    const { botId, channel } = req.params\n    const { start, end } = req.query\n\n    const startDate = unixToDate(start)\n    const endDate = unixToDate(end)\n\n    try {\n      if (!channel || channel === 'all') {\n        const analytics = await db.getBetweenDates(botId, startDate, endDate, undefined)\n        res.send(analytics.map(toDto))\n      } else {\n        const analytics = await db.getBetweenDates(botId, startDate, endDate, channel)\n        res.send(analytics.map(toDto))\n      }\n    } catch (err) {\n      res.status(400).send(err.message)\n    }\n  })\n\n  const toDto = (analytics: Partial<Analytics>) => {\n    return _.pick(analytics, ['metric_name', 'value', 'created_on', 'channel'])\n  }\n\n  const unixToDate = unix => {\n    const momentDate = moment.unix(unix)\n    if (!momentDate.isValid()) {\n      throw new Error(`Invalid unix timestamp format ${unix}.`)\n    }\n\n    return momentDate.toDate()\n  }\n}\n"]}