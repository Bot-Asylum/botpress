{"version":3,"sources":["api.ts"],"names":["bp","analytics","router","http","createRouterForBot","get","req","res","graphData","params","botId","getChartsGraphData","send","metadata","getAnalyticsMetadata","post","fn","body","eval","fnAvg","custom","addGraph","end","metrics","getAll","query","from","to","methods","map","method","name","count"],"mappings":";;;;;;;eAIe,OAAOA,EAAP,EAAgBC,SAAhB,KAA8C;AAC3D,QAAMC,MAAM,GAAGF,EAAE,CAACG,IAAH,CAAQC,kBAAR,CAA2B,WAA3B,CAAf;AAEAF,EAAAA,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC,UAAMC,SAAS,GAAG,MAAMP,SAAS,CAACK,GAAG,CAACG,MAAJ,CAAWC,KAAZ,CAAT,CAA4BC,kBAA5B,EAAxB;AACAJ,IAAAA,GAAG,CAACK,IAAJ,CAASJ,SAAT;AACD,GAHD;AAKAN,EAAAA,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,UAAMM,QAAQ,GAAG,MAAMZ,SAAS,CAACK,GAAG,CAACG,MAAJ,CAAWC,KAAZ,CAAT,CAA4BI,oBAA5B,EAAvB;AACAP,IAAAA,GAAG,CAACK,IAAJ,CAASC,QAAT;AACD,GAHD;AAKAX,EAAAA,MAAM,CAACa,IAAP,CAAY,SAAZ,EAAuB,OAAOT,GAAP,EAAYC,GAAZ,KAAoB;AACzC,UAAMS,EAAE,GAAGV,GAAG,CAACW,IAAJ,CAASD,EAAT,GAAc;AAAEA,MAAAA,EAAE,EAAEE,IAAI,CAACZ,GAAG,CAACW,IAAJ,CAASD,EAAV;AAAV,KAAd,GAA0C,EAArD;AACA,UAAMG,KAAK,GAAGb,GAAG,CAACW,IAAJ,CAASE,KAAT,GAAiB;AAAEA,MAAAA,KAAK,EAAED,IAAI,CAACZ,GAAG,CAACW,IAAJ,CAASE,KAAV;AAAb,KAAjB,GAAmD,EAAjE;AACAlB,IAAAA,SAAS,CAACK,GAAG,CAACG,MAAJ,CAAWC,KAAZ,CAAT,CAA4BU,MAA5B,CAAmCC,QAAnC,CAA4C,EAAE,GAAGf,GAAG,CAACW,IAAT;AAAe,SAAGD,EAAlB;AAAsB,SAAGG;AAAzB,KAA5C;AACAZ,IAAAA,GAAG,CAACe,GAAJ;AACD,GALD;AAOApB,EAAAA,MAAM,CAACG,GAAP,CAAW,iBAAX,EAA8B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChD,UAAMgB,OAAO,GAAG,MAAMtB,SAAS,CAACK,GAAG,CAACG,MAAJ,CAAWC,KAAZ,CAAT,CAA4BU,MAA5B,CAAmCI,MAAnC,CAA0ClB,GAAG,CAACmB,KAAJ,CAAUC,IAApD,EAA0DpB,GAAG,CAACmB,KAAJ,CAAUE,EAApE,CAAtB;AACApB,IAAAA,GAAG,CAACK,IAAJ,CAASW,OAAT;AACD,GAHD;AAKA,QAAMK,OAAO,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,KAA3B,CAAhB;AACAA,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAI;AACpB5B,IAAAA,MAAM,CAACa,IAAP,CAAa,mBAAkBe,MAAO,EAAtC,EAAyC,OAAOxB,GAAP,EAAYC,GAAZ,KAAoB;AAC3D,YAAME,MAAM,GAAG,CAACH,GAAG,CAACW,IAAJ,CAASc,IAAV,EAAgB,IAAI,OAAOzB,GAAG,CAACW,IAAJ,CAASe,KAAhB,KAA0B,QAA1B,GAAqC,CAAC1B,GAAG,CAACW,IAAJ,CAASe,KAAV,CAArC,GAAwD,EAA5D,CAAhB,CAAf;AACA/B,MAAAA,SAAS,CAACK,GAAG,CAACG,MAAJ,CAAWC,KAAZ,CAAT,CAA4BU,MAA5B,CAAmCU,MAAnC,EAA2C,GAAGrB,MAA9C;AACAF,MAAAA,GAAG,CAACe,GAAJ;AACD,KAJD;AAKD,GAND;AAOD,C","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import { SDK } from 'botpress'\n\nimport { AnalyticsByBot } from './typings'\n\nexport default async (bp: SDK, analytics: AnalyticsByBot) => {\n  const router = bp.http.createRouterForBot('analytics')\n\n  router.get('/graphs', async (req, res) => {\n    const graphData = await analytics[req.params.botId].getChartsGraphData()\n    res.send(graphData)\n  })\n\n  router.get('/metadata', async (req, res) => {\n    const metadata = await analytics[req.params.botId].getAnalyticsMetadata()\n    res.send(metadata)\n  })\n\n  router.post('/graphs', async (req, res) => {\n    const fn = req.body.fn ? { fn: eval(req.body.fn) } : {}\n    const fnAvg = req.body.fnAvg ? { fnAvg: eval(req.body.fnAvg) } : {}\n    analytics[req.params.botId].custom.addGraph({ ...req.body, ...fn, ...fnAvg })\n    res.end()\n  })\n\n  router.get('/custom_metrics', async (req, res) => {\n    const metrics = await analytics[req.params.botId].custom.getAll(req.query.from, req.query.to)\n    res.send(metrics)\n  })\n\n  const methods = ['increment', 'decrement', 'set']\n  methods.map(method => {\n    router.post(`/custom_metrics/${method}`, async (req, res) => {\n      const params = [req.body.name, ...(typeof req.body.count === 'number' ? [req.body.count] : [])]\n      analytics[req.params.botId].custom[method](...params)\n      res.end()\n    })\n  })\n}\n"]}