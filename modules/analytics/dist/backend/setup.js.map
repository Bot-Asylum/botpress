{"version":3,"sources":["setup.ts"],"names":["bp","interactionsToTrack","db","Database","initializeDb","events","registerMiddleware","name","direction","handler","incomingMiddleware","order","description","outgoingMiddleware","event","next","_","includes","type","saveIncoming","then","catch","logger","debug","channel","saveOutgoing"],"mappings":";;;;;;;AACA;;AAGA;;;;eAGe,OAAOA,EAAP,EAAgBC,mBAAhB,KAA6C;AAC1D,QAAMC,EAAY,GAAG,IAAIC,WAAJ,CAAaH,EAAb,CAArB;AACA,QAAME,EAAE,CAACE,YAAH,EAAN,CAF0D,CAI1D;AACA;;AAEAJ,EAAAA,EAAE,CAACK,MAAH,CAAUC,kBAAV,CAA6B;AAC3BC,IAAAA,IAAI,EAAE,oBADqB;AAE3BC,IAAAA,SAAS,EAAE,UAFgB;AAG3BC,IAAAA,OAAO,EAAEC,kBAHkB;AAI3BC,IAAAA,KAAK,EAAE,CAJoB;AAK3BC,IAAAA,WAAW,EAAE;AALc,GAA7B;AAQAZ,EAAAA,EAAE,CAACK,MAAH,CAAUC,kBAAV,CAA6B;AAC3BC,IAAAA,IAAI,EAAE,oBADqB;AAE3BC,IAAAA,SAAS,EAAE,UAFgB;AAG3BC,IAAAA,OAAO,EAAEI,kBAHkB;AAI3BF,IAAAA,KAAK,EAAE,CAJoB;AAK3BC,IAAAA,WAAW,EAAE;AALc,GAA7B;;AAQA,WAASF,kBAAT,CAA4BI,KAA5B,EAAiDC,IAAjD,EAAsF;AACpF,QAAI,CAACC,gBAAEC,QAAF,CAAWhB,mBAAX,EAAgCa,KAAK,CAACI,IAAtC,CAAL,EAAkD;AAChD,aAAOH,IAAI,EAAX;AACD,KAHmF,CAKpF;;;AACAb,IAAAA,EAAE,CAACiB,YAAH,CAAgBL,KAAhB,EACGM,IADH,GAEGC,KAFH,CAES,MAAM;AACXrB,MAAAA,EAAE,CAACsB,MAAH,CAAUC,KAAV,CAAgB,6CAA6CT,KAAK,CAACU,OAAnE;AACD,KAJH;AAMAT,IAAAA,IAAI;AACL;;AAED,WAASF,kBAAT,CAA4BC,KAA5B,EAAiDC,IAAjD,EAAsF;AACpF,QAAI,CAACC,gBAAEC,QAAF,CAAWhB,mBAAX,EAAgCa,KAAK,CAACI,IAAtC,CAAL,EAAkD;AAChD,aAAOH,IAAI,EAAX;AACD,KAHmF,CAKpF;;;AACAb,IAAAA,EAAE,CAACuB,YAAH,CAAgBX,KAAhB,EACGM,IADH,GAEGC,KAFH,CAES,MAAM;AACXrB,MAAAA,EAAE,CAACsB,MAAH,CAAUC,KAAV,CAAgB,6CAA6CT,KAAK,CAACU,OAAnE;AACD,KAJH;AAMAT,IAAAA,IAAI;AACL;AACF,C","sourceRoot":"/Users/renaud/Code/Botpress/botpress/modules/analytics/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport { SDK } from '.'\nimport Database from './db'\nimport seed from './seed'\n\nexport default async (bp: SDK, interactionsToTrack: any) => {\n  const db: Database = new Database(bp)\n  await db.initializeDb()\n\n  // Dev: uncomment to generate users/interactions\n  // seed.run(bp.database)\n\n  bp.events.registerMiddleware({\n    name: 'analytics.incoming',\n    direction: 'incoming',\n    handler: incomingMiddleware,\n    order: 5,\n    description: 'Tracks incoming messages for Analytics purposes'\n  })\n\n  bp.events.registerMiddleware({\n    name: 'analytics.outgoing',\n    direction: 'outgoing',\n    handler: outgoingMiddleware,\n    order: 5,\n    description: 'Tracks outgoing messages for Analytics purposes'\n  })\n\n  function incomingMiddleware(event: sdk.IO.Event, next: sdk.IO.MiddlewareNextCallback) {\n    if (!_.includes(interactionsToTrack, event.type)) {\n      return next()\n    }\n\n    // Asynchronously save the interaction (non-blocking)\n    db.saveIncoming(event)\n      .then()\n      .catch(() => {\n        bp.logger.debug('Could not save incoming interaction for ' + event.channel)\n      })\n\n    next()\n  }\n\n  function outgoingMiddleware(event: sdk.IO.Event, next: sdk.IO.MiddlewareNextCallback) {\n    if (!_.includes(interactionsToTrack, event.type)) {\n      return next()\n    }\n\n    // Asynchronously save the interaction (non-blocking)\n    db.saveOutgoing(event)\n      .then()\n      .catch(() => {\n        bp.logger.debug('Could not save outgoing interaction for ' + event.channel)\n      })\n\n    next()\n  }\n}\n"]}